/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SCHEMA_TYPES_H
#define SCHEMA_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>
/* custom thrift includes */

/* begin types */

enum _Crud_operation {
  CRUD_OPERATION_CRUD_GET = 0,
  CRUD_OPERATION_CRUD_REMOVE = 1,
  CRUD_OPERATION_CRUD_NEW = 2,
  CRUD_OPERATION_CRUD_UPDATE = 3
};
typedef enum _Crud_operation Crud_operation;

/* return the name of the constant */
const char *
toString_Crud_operation(int value); 

enum _Condition_code {
  CONDITION_CODE_OP_EQUAL = 0,
  CONDITION_CODE_OP_GREATER = 1,
  CONDITION_CODE_OP_LESS = 2,
  CONDITION_CODE_OP_NOT_GREATER = 3,
  CONDITION_CODE_OP_NOT_LESS = 4,
  CONDITION_CODE_OP_SUBSTR = 5
};
typedef enum _Condition_code Condition_code;

/* return the name of the constant */
const char *
toString_Condition_code(int value); 

enum _Type {
  TYPE_STRING_TYPE = 0,
  TYPE_INTEGER_TYPE = 1,
  TYPE_BOOLEAN_TYPE = 2
};
typedef enum _Type Type;

/* return the name of the constant */
const char *
toString_Type(int value); 

/* struct Value */
struct _Value
{ 
  ThriftStruct parent; 

  /* public */
  gint32 Integer;
  gboolean __isset_Integer;
  gboolean Boolean;
  gboolean __isset_Boolean;
  gchar * String;
  gboolean __isset_String;
};
typedef struct _Value Value;

struct _ValueClass
{
  ThriftStructClass parent;
};
typedef struct _ValueClass ValueClass;

GType value_get_type (void);
#define TYPE_VALUE (value_get_type())
#define VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_VALUE, Value))
#define VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_VALUE, ValueClass))
#define IS_VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_VALUE))
#define IS_VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_VALUE))
#define VALUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_VALUE, ValueClass))

/* struct Field_value */
struct _Field_value
{ 
  ThriftStruct parent; 

  /* public */
  Type type;
  gboolean __isset_type;
  Value * value;
  gboolean __isset_value;
};
typedef struct _Field_value Field_value;

struct _Field_valueClass
{
  ThriftStructClass parent;
};
typedef struct _Field_valueClass Field_valueClass;

GType field_value_get_type (void);
#define TYPE_FIELD_VALUE (field_value_get_type())
#define FIELD_VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FIELD_VALUE, Field_value))
#define FIELD_VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_FIELD_VALUE, Field_valueClass))
#define IS_FIELD_VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FIELD_VALUE))
#define IS_FIELD_VALUE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_FIELD_VALUE))
#define FIELD_VALUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FIELD_VALUE, Field_valueClass))

/* struct Field */
struct _Field
{ 
  ThriftStruct parent; 

  /* public */
  gchar * name;
  gboolean __isset_name;
  Field_value * value;
  gboolean __isset_value;
};
typedef struct _Field Field;

struct _FieldClass
{
  ThriftStructClass parent;
};
typedef struct _FieldClass FieldClass;

GType field_get_type (void);
#define TYPE_FIELD (field_get_type())
#define FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FIELD, Field))
#define FIELD_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_FIELD, FieldClass))
#define IS_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FIELD))
#define IS_FIELD_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_FIELD))
#define FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FIELD, FieldClass))

/* struct Entity */
struct _Entity
{ 
  ThriftStruct parent; 

  /* public */
  gint16 fields_count;
  gboolean __isset_fields_count;
  gint16 rel_count;
  gboolean __isset_rel_count;
  GPtrArray * fields;
  gboolean __isset_fields;
  GPtrArray * rel_ids;
  gboolean __isset_rel_ids;
};
typedef struct _Entity Entity;

struct _EntityClass
{
  ThriftStructClass parent;
};
typedef struct _EntityClass EntityClass;

GType entity_get_type (void);
#define TYPE_ENTITY (entity_get_type())
#define ENTITY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ENTITY, Entity))
#define ENTITY_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ENTITY, EntityClass))
#define IS_ENTITY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ENTITY))
#define IS_ENTITY_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ENTITY))
#define ENTITY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ENTITY, EntityClass))

/* struct Field_filter */
struct _Field_filter
{ 
  ThriftStruct parent; 

  /* public */
  Condition_code op;
  gboolean __isset_op;
  gchar * field_name;
  gboolean __isset_field_name;
  Field_value * field_value;
  gboolean __isset_field_value;
};
typedef struct _Field_filter Field_filter;

struct _Field_filterClass
{
  ThriftStructClass parent;
};
typedef struct _Field_filterClass Field_filterClass;

GType field_filter_get_type (void);
#define TYPE_FIELD_FILTER (field_filter_get_type())
#define FIELD_FILTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FIELD_FILTER, Field_filter))
#define FIELD_FILTER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_FIELD_FILTER, Field_filterClass))
#define IS_FIELD_FILTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FIELD_FILTER))
#define IS_FIELD_FILTER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_FIELD_FILTER))
#define FIELD_FILTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FIELD_FILTER, Field_filterClass))

/* struct Condition_union */
struct _Condition_union
{ 
  ThriftStruct parent; 

  /* public */
  Field_value * id;
  gboolean __isset_id;
  Field_filter * field_filter;
  gboolean __isset_field_filter;
};
typedef struct _Condition_union Condition_union;

struct _Condition_unionClass
{
  ThriftStructClass parent;
};
typedef struct _Condition_unionClass Condition_unionClass;

GType condition_union_get_type (void);
#define TYPE_CONDITION_UNION (condition_union_get_type())
#define CONDITION_UNION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CONDITION_UNION, Condition_union))
#define CONDITION_UNION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_CONDITION_UNION, Condition_unionClass))
#define IS_CONDITION_UNION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CONDITION_UNION))
#define IS_CONDITION_UNION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CONDITION_UNION))
#define CONDITION_UNION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CONDITION_UNION, Condition_unionClass))

/* struct Condition */
struct _Condition
{ 
  ThriftStruct parent; 

  /* public */
  gint8 is_negative;
  gboolean __isset_is_negative;
  gint8 is_id;
  gboolean __isset_is_id;
  Condition_union * condition_union;
  gboolean __isset_condition_union;
};
typedef struct _Condition Condition;

struct _ConditionClass
{
  ThriftStructClass parent;
};
typedef struct _ConditionClass ConditionClass;

GType condition_get_type (void);
#define TYPE_CONDITION (condition_get_type())
#define CONDITION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CONDITION, Condition))
#define CONDITION_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_CONDITION, ConditionClass))
#define IS_CONDITION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CONDITION))
#define IS_CONDITION_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CONDITION))
#define CONDITION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CONDITION, ConditionClass))

/* struct Filter_list */
struct _Filter_list
{ 
  ThriftStruct parent; 

  /* public */
  gint8 is_negative;
  gboolean __isset_is_negative;
  GPtrArray * and_conditions;
  gboolean __isset_and_conditions;
};
typedef struct _Filter_list Filter_list;

struct _Filter_listClass
{
  ThriftStructClass parent;
};
typedef struct _Filter_listClass Filter_listClass;

GType filter_list_get_type (void);
#define TYPE_FILTER_LIST (filter_list_get_type())
#define FILTER_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FILTER_LIST, Filter_list))
#define FILTER_LIST_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_FILTER_LIST, Filter_listClass))
#define IS_FILTER_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FILTER_LIST))
#define IS_FILTER_LIST_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_FILTER_LIST))
#define FILTER_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FILTER_LIST, Filter_listClass))

/* struct Request */
struct _Request
{ 
  ThriftStruct parent; 

  /* public */
  Crud_operation op;
  gboolean __isset_op;
  GPtrArray * field_names_to_output;
  gboolean __isset_field_names_to_output;
  GPtrArray * tree;
  gboolean __isset_tree;
  Entity * entity;
  gboolean __isset_entity;
};
typedef struct _Request Request;

struct _RequestClass
{
  ThriftStructClass parent;
};
typedef struct _RequestClass RequestClass;

GType request_get_type (void);
#define TYPE_REQUEST (request_get_type())
#define REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_REQUEST, Request))
#define REQUEST_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_REQUEST, RequestClass))
#define IS_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_REQUEST))
#define IS_REQUEST_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_REQUEST))
#define REQUEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_REQUEST, RequestClass))

/* struct Answer */
struct _Answer
{ 
  ThriftStruct parent; 

  /* public */
  gint16 code;
  gboolean __isset_code;
  gchar * error_message;
  gboolean __isset_error_message;
  GPtrArray * entities;
  gboolean __isset_entities;
};
typedef struct _Answer Answer;

struct _AnswerClass
{
  ThriftStructClass parent;
};
typedef struct _AnswerClass AnswerClass;

GType answer_get_type (void);
#define TYPE_ANSWER (answer_get_type())
#define ANSWER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ANSWER, Answer))
#define ANSWER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ANSWER, AnswerClass))
#define IS_ANSWER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ANSWER))
#define IS_ANSWER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ANSWER))
#define ANSWER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ANSWER, AnswerClass))

/* constants */

/* struct DBRequestPingArgs */
struct _DBRequestPingArgs
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _DBRequestPingArgs DBRequestPingArgs;

struct _DBRequestPingArgsClass
{
  ThriftStructClass parent;
};
typedef struct _DBRequestPingArgsClass DBRequestPingArgsClass;

GType d_b_request_ping_args_get_type (void);
#define TYPE_D_B_REQUEST_PING_ARGS (d_b_request_ping_args_get_type())
#define D_B_REQUEST_PING_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_D_B_REQUEST_PING_ARGS, DBRequestPingArgs))
#define D_B_REQUEST_PING_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_D_B_REQUEST_PING_ARGS, DBRequestPingArgsClass))
#define IS_D_B_REQUEST_PING_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_D_B_REQUEST_PING_ARGS))
#define IS_D_B_REQUEST_PING_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_D_B_REQUEST_PING_ARGS))
#define D_B_REQUEST_PING_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_D_B_REQUEST_PING_ARGS, DBRequestPingArgsClass))

/* struct DBRequestPingResult */
struct _DBRequestPingResult
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _DBRequestPingResult DBRequestPingResult;

struct _DBRequestPingResultClass
{
  ThriftStructClass parent;
};
typedef struct _DBRequestPingResultClass DBRequestPingResultClass;

GType d_b_request_ping_result_get_type (void);
#define TYPE_D_B_REQUEST_PING_RESULT (d_b_request_ping_result_get_type())
#define D_B_REQUEST_PING_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_D_B_REQUEST_PING_RESULT, DBRequestPingResult))
#define D_B_REQUEST_PING_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_D_B_REQUEST_PING_RESULT, DBRequestPingResultClass))
#define IS_D_B_REQUEST_PING_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_D_B_REQUEST_PING_RESULT))
#define IS_D_B_REQUEST_PING_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_D_B_REQUEST_PING_RESULT))
#define D_B_REQUEST_PING_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_D_B_REQUEST_PING_RESULT, DBRequestPingResultClass))

/* struct DBRequestDoRequestArgs */
struct _DBRequestDoRequestArgs
{ 
  ThriftStruct parent; 

  /* public */
  Request * req;
  gboolean __isset_req;
};
typedef struct _DBRequestDoRequestArgs DBRequestDoRequestArgs;

struct _DBRequestDoRequestArgsClass
{
  ThriftStructClass parent;
};
typedef struct _DBRequestDoRequestArgsClass DBRequestDoRequestArgsClass;

GType d_b_request_do_request_args_get_type (void);
#define TYPE_D_B_REQUEST_DO_REQUEST_ARGS (d_b_request_do_request_args_get_type())
#define D_B_REQUEST_DO_REQUEST_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_D_B_REQUEST_DO_REQUEST_ARGS, DBRequestDoRequestArgs))
#define D_B_REQUEST_DO_REQUEST_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_D_B_REQUEST_DO_REQUEST_ARGS, DBRequestDoRequestArgsClass))
#define IS_D_B_REQUEST_DO_REQUEST_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_D_B_REQUEST_DO_REQUEST_ARGS))
#define IS_D_B_REQUEST_DO_REQUEST_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_D_B_REQUEST_DO_REQUEST_ARGS))
#define D_B_REQUEST_DO_REQUEST_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_D_B_REQUEST_DO_REQUEST_ARGS, DBRequestDoRequestArgsClass))

/* struct DBRequestDoRequestResult */
struct _DBRequestDoRequestResult
{ 
  ThriftStruct parent; 

  /* public */
  Answer * success;
  gboolean __isset_success;
};
typedef struct _DBRequestDoRequestResult DBRequestDoRequestResult;

struct _DBRequestDoRequestResultClass
{
  ThriftStructClass parent;
};
typedef struct _DBRequestDoRequestResultClass DBRequestDoRequestResultClass;

GType d_b_request_do_request_result_get_type (void);
#define TYPE_D_B_REQUEST_DO_REQUEST_RESULT (d_b_request_do_request_result_get_type())
#define D_B_REQUEST_DO_REQUEST_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_D_B_REQUEST_DO_REQUEST_RESULT, DBRequestDoRequestResult))
#define D_B_REQUEST_DO_REQUEST_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_D_B_REQUEST_DO_REQUEST_RESULT, DBRequestDoRequestResultClass))
#define IS_D_B_REQUEST_DO_REQUEST_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_D_B_REQUEST_DO_REQUEST_RESULT))
#define IS_D_B_REQUEST_DO_REQUEST_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_D_B_REQUEST_DO_REQUEST_RESULT))
#define D_B_REQUEST_DO_REQUEST_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_D_B_REQUEST_DO_REQUEST_RESULT, DBRequestDoRequestResultClass))

#endif /* SCHEMA_TYPES_H */
