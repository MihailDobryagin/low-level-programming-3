/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef D_B_REQUEST_H
#define D_B_REQUEST_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "schema_types.h"

/* DBRequest service interface */
typedef struct _DBRequestIf DBRequestIf;  /* dummy object */

struct _DBRequestIfInterface
{
  GTypeInterface parent;

  gboolean (*ping) (DBRequestIf *iface, GError **error);
  gboolean (*do_request) (DBRequestIf *iface, Answer_TRANSPORT ** _return, const Request_TRANSPORT * req, GError **error);
};
typedef struct _DBRequestIfInterface DBRequestIfInterface;

GType d_b_request_if_get_type (void);
#define TYPE_D_B_REQUEST_IF (d_b_request_if_get_type())
#define D_B_REQUEST_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_D_B_REQUEST_IF, DBRequestIf))
#define IS_D_B_REQUEST_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_D_B_REQUEST_IF))
#define D_B_REQUEST_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_D_B_REQUEST_IF, DBRequestIfInterface))

gboolean d_b_request_if_ping (DBRequestIf *iface, GError **error);
gboolean d_b_request_if_do_request (DBRequestIf *iface, Answer_TRANSPORT ** _return, const Request_TRANSPORT * req, GError **error);

/* DBRequest service client */
struct _DBRequestClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _DBRequestClient DBRequestClient;

struct _DBRequestClientClass
{
  GObjectClass parent;
};
typedef struct _DBRequestClientClass DBRequestClientClass;

GType d_b_request_client_get_type (void);
#define TYPE_D_B_REQUEST_CLIENT (d_b_request_client_get_type())
#define D_B_REQUEST_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_D_B_REQUEST_CLIENT, DBRequestClient))
#define D_B_REQUEST_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_D_B_REQUEST_CLIENT, DBRequestClientClass))
#define D_B_REQUEST_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_D_B_REQUEST_CLIENT))
#define D_B_REQUEST_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_D_B_REQUEST_CLIENT))
#define D_B_REQUEST_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_D_B_REQUEST_CLIENT, DBRequestClientClass))

gboolean d_b_request_client_ping (DBRequestIf * iface, GError ** error);
gboolean d_b_request_client_send_ping (DBRequestIf * iface, GError ** error);
gboolean d_b_request_client_recv_ping (DBRequestIf * iface, GError ** error);
gboolean d_b_request_client_do_request (DBRequestIf * iface, Answer_TRANSPORT ** _return, const Request_TRANSPORT * req, GError ** error);
gboolean d_b_request_client_send_do_request (DBRequestIf * iface, const Request_TRANSPORT * req, GError ** error);
gboolean d_b_request_client_recv_do_request (DBRequestIf * iface, Answer_TRANSPORT ** _return, GError ** error);
void d_b_request_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void d_b_request_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* DBRequest handler (abstract base class) */
struct _DBRequestHandler
{
  GObject parent;
};
typedef struct _DBRequestHandler DBRequestHandler;

struct _DBRequestHandlerClass
{
  GObjectClass parent;

  gboolean (*ping) (DBRequestIf *iface, GError **error);
  gboolean (*do_request) (DBRequestIf *iface, Answer_TRANSPORT ** _return, const Request_TRANSPORT * req, GError **error);
};
typedef struct _DBRequestHandlerClass DBRequestHandlerClass;

GType d_b_request_handler_get_type (void);
#define TYPE_D_B_REQUEST_HANDLER (d_b_request_handler_get_type())
#define D_B_REQUEST_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_D_B_REQUEST_HANDLER, DBRequestHandler))
#define IS_D_B_REQUEST_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_D_B_REQUEST_HANDLER))
#define D_B_REQUEST_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_D_B_REQUEST_HANDLER, DBRequestHandlerClass))
#define IS_D_B_REQUEST_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_D_B_REQUEST_HANDLER))
#define D_B_REQUEST_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_D_B_REQUEST_HANDLER, DBRequestHandlerClass))

gboolean d_b_request_handler_ping (DBRequestIf *iface, GError **error);
gboolean d_b_request_handler_do_request (DBRequestIf *iface, Answer_TRANSPORT ** _return, const Request_TRANSPORT * req, GError **error);

/* DBRequest processor */
struct _DBRequestProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  DBRequestHandler *handler;
  GHashTable *process_map;
};
typedef struct _DBRequestProcessor DBRequestProcessor;

struct _DBRequestProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _DBRequestProcessorClass DBRequestProcessorClass;

GType d_b_request_processor_get_type (void);
#define TYPE_D_B_REQUEST_PROCESSOR (d_b_request_processor_get_type())
#define D_B_REQUEST_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_D_B_REQUEST_PROCESSOR, DBRequestProcessor))
#define IS_D_B_REQUEST_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_D_B_REQUEST_PROCESSOR))
#define D_B_REQUEST_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_D_B_REQUEST_PROCESSOR, DBRequestProcessorClass))
#define IS_D_B_REQUEST_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_D_B_REQUEST_PROCESSOR))
#define D_B_REQUEST_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_D_B_REQUEST_PROCESSOR, DBRequestProcessorClass))

#endif /* D_B_REQUEST_H */
