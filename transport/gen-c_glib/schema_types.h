/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SCHEMA_TYPES_H
#define SCHEMA_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>
/* custom thrift includes */

/* begin types */

enum _Crud_operation_TRANSPORT {
  CRUD_OPERATION__T_R_A_N_S_P_O_R_T_CRUD_GET = 0,
  CRUD_OPERATION__T_R_A_N_S_P_O_R_T_CRUD_REMOVE = 1,
  CRUD_OPERATION__T_R_A_N_S_P_O_R_T_CRUD_NEW = 2,
  CRUD_OPERATION__T_R_A_N_S_P_O_R_T_CRUD_UPDATE = 3
};
typedef enum _Crud_operation_TRANSPORT Crud_operation_TRANSPORT;

/* return the name of the constant */
const char *
toString_Crud_operation_TRANSPORT(int value); 

enum _Condition_code_TRANSPORT {
  CONDITION_CODE__T_R_A_N_S_P_O_R_T_OP_EQUAL = 0,
  CONDITION_CODE__T_R_A_N_S_P_O_R_T_OP_GREATER = 1,
  CONDITION_CODE__T_R_A_N_S_P_O_R_T_OP_LESS = 2,
  CONDITION_CODE__T_R_A_N_S_P_O_R_T_OP_NOT_GREATER = 3,
  CONDITION_CODE__T_R_A_N_S_P_O_R_T_OP_NOT_LESS = 4,
  CONDITION_CODE__T_R_A_N_S_P_O_R_T_OP_SUBSTR = 5
};
typedef enum _Condition_code_TRANSPORT Condition_code_TRANSPORT;

/* return the name of the constant */
const char *
toString_Condition_code_TRANSPORT(int value); 

enum _Type_TRANSPORT {
  TYPE__T_R_A_N_S_P_O_R_T_STRING_TYPE = 0,
  TYPE__T_R_A_N_S_P_O_R_T_INTEGER_TYPE = 1,
  TYPE__T_R_A_N_S_P_O_R_T_BOOLEAN_TYPE = 2
};
typedef enum _Type_TRANSPORT Type_TRANSPORT;

/* return the name of the constant */
const char *
toString_Type_TRANSPORT(int value); 

/* struct Value_TRANSPORT */
struct _Value_TRANSPORT
{ 
  ThriftStruct parent; 

  /* public */
  gint32 Integer;
  gboolean __isset_Integer;
  gboolean Boolean;
  gboolean __isset_Boolean;
  gchar * String;
  gboolean __isset_String;
};
typedef struct _Value_TRANSPORT Value_TRANSPORT;

struct _Value_TRANSPORTClass
{
  ThriftStructClass parent;
};
typedef struct _Value_TRANSPORTClass Value_TRANSPORTClass;

GType value__t_r_a_n_s_p_o_r_t_get_type (void);
#define TYPE_VALUE__T_R_A_N_S_P_O_R_T (value__t_r_a_n_s_p_o_r_t_get_type())
#define VALUE__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_VALUE__T_R_A_N_S_P_O_R_T, Value_TRANSPORT))
#define VALUE__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_VALUE__T_R_A_N_S_P_O_R_T, Value_TRANSPORTClass))
#define IS_VALUE__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_VALUE__T_R_A_N_S_P_O_R_T))
#define IS_VALUE__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_VALUE__T_R_A_N_S_P_O_R_T))
#define VALUE__T_R_A_N_S_P_O_R_T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_VALUE__T_R_A_N_S_P_O_R_T, Value_TRANSPORTClass))

/* struct Field_value_TRANSPORT */
struct _Field_value_TRANSPORT
{ 
  ThriftStruct parent; 

  /* public */
  Type_TRANSPORT type;
  gboolean __isset_type;
  Value_TRANSPORT * value;
  gboolean __isset_value;
};
typedef struct _Field_value_TRANSPORT Field_value_TRANSPORT;

struct _Field_value_TRANSPORTClass
{
  ThriftStructClass parent;
};
typedef struct _Field_value_TRANSPORTClass Field_value_TRANSPORTClass;

GType field_value__t_r_a_n_s_p_o_r_t_get_type (void);
#define TYPE_FIELD_VALUE__T_R_A_N_S_P_O_R_T (field_value__t_r_a_n_s_p_o_r_t_get_type())
#define FIELD_VALUE__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FIELD_VALUE__T_R_A_N_S_P_O_R_T, Field_value_TRANSPORT))
#define FIELD_VALUE__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_FIELD_VALUE__T_R_A_N_S_P_O_R_T, Field_value_TRANSPORTClass))
#define IS_FIELD_VALUE__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FIELD_VALUE__T_R_A_N_S_P_O_R_T))
#define IS_FIELD_VALUE__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_FIELD_VALUE__T_R_A_N_S_P_O_R_T))
#define FIELD_VALUE__T_R_A_N_S_P_O_R_T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FIELD_VALUE__T_R_A_N_S_P_O_R_T, Field_value_TRANSPORTClass))

/* struct Field_TRANSPORT */
struct _Field_TRANSPORT
{ 
  ThriftStruct parent; 

  /* public */
  gchar * name;
  gboolean __isset_name;
  Field_value_TRANSPORT * value;
  gboolean __isset_value;
};
typedef struct _Field_TRANSPORT Field_TRANSPORT;

struct _Field_TRANSPORTClass
{
  ThriftStructClass parent;
};
typedef struct _Field_TRANSPORTClass Field_TRANSPORTClass;

GType field__t_r_a_n_s_p_o_r_t_get_type (void);
#define TYPE_FIELD__T_R_A_N_S_P_O_R_T (field__t_r_a_n_s_p_o_r_t_get_type())
#define FIELD__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FIELD__T_R_A_N_S_P_O_R_T, Field_TRANSPORT))
#define FIELD__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_FIELD__T_R_A_N_S_P_O_R_T, Field_TRANSPORTClass))
#define IS_FIELD__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FIELD__T_R_A_N_S_P_O_R_T))
#define IS_FIELD__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_FIELD__T_R_A_N_S_P_O_R_T))
#define FIELD__T_R_A_N_S_P_O_R_T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FIELD__T_R_A_N_S_P_O_R_T, Field_TRANSPORTClass))

/* struct Entity_TRANSPORT */
struct _Entity_TRANSPORT
{ 
  ThriftStruct parent; 

  /* public */
  gint16 fields_count;
  gboolean __isset_fields_count;
  gint16 rel_count;
  gboolean __isset_rel_count;
  GPtrArray * fields;
  gboolean __isset_fields;
  GPtrArray * rel_ids;
  gboolean __isset_rel_ids;
};
typedef struct _Entity_TRANSPORT Entity_TRANSPORT;

struct _Entity_TRANSPORTClass
{
  ThriftStructClass parent;
};
typedef struct _Entity_TRANSPORTClass Entity_TRANSPORTClass;

GType entity__t_r_a_n_s_p_o_r_t_get_type (void);
#define TYPE_ENTITY__T_R_A_N_S_P_O_R_T (entity__t_r_a_n_s_p_o_r_t_get_type())
#define ENTITY__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ENTITY__T_R_A_N_S_P_O_R_T, Entity_TRANSPORT))
#define ENTITY__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ENTITY__T_R_A_N_S_P_O_R_T, Entity_TRANSPORTClass))
#define IS_ENTITY__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ENTITY__T_R_A_N_S_P_O_R_T))
#define IS_ENTITY__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ENTITY__T_R_A_N_S_P_O_R_T))
#define ENTITY__T_R_A_N_S_P_O_R_T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ENTITY__T_R_A_N_S_P_O_R_T, Entity_TRANSPORTClass))

/* struct Field_filter_TRANSPORT */
struct _Field_filter_TRANSPORT
{ 
  ThriftStruct parent; 

  /* public */
  Condition_code_TRANSPORT op;
  gboolean __isset_op;
  gchar * field_name;
  gboolean __isset_field_name;
  Field_value_TRANSPORT * field_value;
  gboolean __isset_field_value;
};
typedef struct _Field_filter_TRANSPORT Field_filter_TRANSPORT;

struct _Field_filter_TRANSPORTClass
{
  ThriftStructClass parent;
};
typedef struct _Field_filter_TRANSPORTClass Field_filter_TRANSPORTClass;

GType field_filter__t_r_a_n_s_p_o_r_t_get_type (void);
#define TYPE_FIELD_FILTER__T_R_A_N_S_P_O_R_T (field_filter__t_r_a_n_s_p_o_r_t_get_type())
#define FIELD_FILTER__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FIELD_FILTER__T_R_A_N_S_P_O_R_T, Field_filter_TRANSPORT))
#define FIELD_FILTER__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_FIELD_FILTER__T_R_A_N_S_P_O_R_T, Field_filter_TRANSPORTClass))
#define IS_FIELD_FILTER__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FIELD_FILTER__T_R_A_N_S_P_O_R_T))
#define IS_FIELD_FILTER__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_FIELD_FILTER__T_R_A_N_S_P_O_R_T))
#define FIELD_FILTER__T_R_A_N_S_P_O_R_T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FIELD_FILTER__T_R_A_N_S_P_O_R_T, Field_filter_TRANSPORTClass))

/* struct Condition_union_TRANSPORT */
struct _Condition_union_TRANSPORT
{ 
  ThriftStruct parent; 

  /* public */
  Field_value_TRANSPORT * id;
  gboolean __isset_id;
  Field_filter_TRANSPORT * field_filter;
  gboolean __isset_field_filter;
};
typedef struct _Condition_union_TRANSPORT Condition_union_TRANSPORT;

struct _Condition_union_TRANSPORTClass
{
  ThriftStructClass parent;
};
typedef struct _Condition_union_TRANSPORTClass Condition_union_TRANSPORTClass;

GType condition_union__t_r_a_n_s_p_o_r_t_get_type (void);
#define TYPE_CONDITION_UNION__T_R_A_N_S_P_O_R_T (condition_union__t_r_a_n_s_p_o_r_t_get_type())
#define CONDITION_UNION__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CONDITION_UNION__T_R_A_N_S_P_O_R_T, Condition_union_TRANSPORT))
#define CONDITION_UNION__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_CONDITION_UNION__T_R_A_N_S_P_O_R_T, Condition_union_TRANSPORTClass))
#define IS_CONDITION_UNION__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CONDITION_UNION__T_R_A_N_S_P_O_R_T))
#define IS_CONDITION_UNION__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CONDITION_UNION__T_R_A_N_S_P_O_R_T))
#define CONDITION_UNION__T_R_A_N_S_P_O_R_T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CONDITION_UNION__T_R_A_N_S_P_O_R_T, Condition_union_TRANSPORTClass))

/* struct Condition_TRANSPORT */
struct _Condition_TRANSPORT
{ 
  ThriftStruct parent; 

  /* public */
  gint8 is_negative;
  gboolean __isset_is_negative;
  gint8 is_id;
  gboolean __isset_is_id;
  Condition_union_TRANSPORT * condition_union;
  gboolean __isset_condition_union;
};
typedef struct _Condition_TRANSPORT Condition_TRANSPORT;

struct _Condition_TRANSPORTClass
{
  ThriftStructClass parent;
};
typedef struct _Condition_TRANSPORTClass Condition_TRANSPORTClass;

GType condition__t_r_a_n_s_p_o_r_t_get_type (void);
#define TYPE_CONDITION__T_R_A_N_S_P_O_R_T (condition__t_r_a_n_s_p_o_r_t_get_type())
#define CONDITION__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CONDITION__T_R_A_N_S_P_O_R_T, Condition_TRANSPORT))
#define CONDITION__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_CONDITION__T_R_A_N_S_P_O_R_T, Condition_TRANSPORTClass))
#define IS_CONDITION__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CONDITION__T_R_A_N_S_P_O_R_T))
#define IS_CONDITION__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CONDITION__T_R_A_N_S_P_O_R_T))
#define CONDITION__T_R_A_N_S_P_O_R_T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CONDITION__T_R_A_N_S_P_O_R_T, Condition_TRANSPORTClass))

/* struct Filter_list_TRANSPORT */
struct _Filter_list_TRANSPORT
{ 
  ThriftStruct parent; 

  /* public */
  gint8 is_negative;
  gboolean __isset_is_negative;
  GPtrArray * and_conditions;
  gboolean __isset_and_conditions;
};
typedef struct _Filter_list_TRANSPORT Filter_list_TRANSPORT;

struct _Filter_list_TRANSPORTClass
{
  ThriftStructClass parent;
};
typedef struct _Filter_list_TRANSPORTClass Filter_list_TRANSPORTClass;

GType filter_list__t_r_a_n_s_p_o_r_t_get_type (void);
#define TYPE_FILTER_LIST__T_R_A_N_S_P_O_R_T (filter_list__t_r_a_n_s_p_o_r_t_get_type())
#define FILTER_LIST__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FILTER_LIST__T_R_A_N_S_P_O_R_T, Filter_list_TRANSPORT))
#define FILTER_LIST__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_FILTER_LIST__T_R_A_N_S_P_O_R_T, Filter_list_TRANSPORTClass))
#define IS_FILTER_LIST__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FILTER_LIST__T_R_A_N_S_P_O_R_T))
#define IS_FILTER_LIST__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_FILTER_LIST__T_R_A_N_S_P_O_R_T))
#define FILTER_LIST__T_R_A_N_S_P_O_R_T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FILTER_LIST__T_R_A_N_S_P_O_R_T, Filter_list_TRANSPORTClass))

/* struct Request_TRANSPORT */
struct _Request_TRANSPORT
{ 
  ThriftStruct parent; 

  /* public */
  Crud_operation_TRANSPORT op;
  gboolean __isset_op;
  GPtrArray * field_names_to_output;
  gboolean __isset_field_names_to_output;
  GPtrArray * tree;
  gboolean __isset_tree;
  Entity_TRANSPORT * entity;
  gboolean __isset_entity;
};
typedef struct _Request_TRANSPORT Request_TRANSPORT;

struct _Request_TRANSPORTClass
{
  ThriftStructClass parent;
};
typedef struct _Request_TRANSPORTClass Request_TRANSPORTClass;

GType request__t_r_a_n_s_p_o_r_t_get_type (void);
#define TYPE_REQUEST__T_R_A_N_S_P_O_R_T (request__t_r_a_n_s_p_o_r_t_get_type())
#define REQUEST__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_REQUEST__T_R_A_N_S_P_O_R_T, Request_TRANSPORT))
#define REQUEST__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_REQUEST__T_R_A_N_S_P_O_R_T, Request_TRANSPORTClass))
#define IS_REQUEST__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_REQUEST__T_R_A_N_S_P_O_R_T))
#define IS_REQUEST__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_REQUEST__T_R_A_N_S_P_O_R_T))
#define REQUEST__T_R_A_N_S_P_O_R_T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_REQUEST__T_R_A_N_S_P_O_R_T, Request_TRANSPORTClass))

/* struct Answer_TRANSPORT */
struct _Answer_TRANSPORT
{ 
  ThriftStruct parent; 

  /* public */
  gint16 code;
  gboolean __isset_code;
  gchar * error_message;
  gboolean __isset_error_message;
  GPtrArray * entities;
  gboolean __isset_entities;
};
typedef struct _Answer_TRANSPORT Answer_TRANSPORT;

struct _Answer_TRANSPORTClass
{
  ThriftStructClass parent;
};
typedef struct _Answer_TRANSPORTClass Answer_TRANSPORTClass;

GType answer__t_r_a_n_s_p_o_r_t_get_type (void);
#define TYPE_ANSWER__T_R_A_N_S_P_O_R_T (answer__t_r_a_n_s_p_o_r_t_get_type())
#define ANSWER__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ANSWER__T_R_A_N_S_P_O_R_T, Answer_TRANSPORT))
#define ANSWER__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ANSWER__T_R_A_N_S_P_O_R_T, Answer_TRANSPORTClass))
#define IS_ANSWER__T_R_A_N_S_P_O_R_T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ANSWER__T_R_A_N_S_P_O_R_T))
#define IS_ANSWER__T_R_A_N_S_P_O_R_T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ANSWER__T_R_A_N_S_P_O_R_T))
#define ANSWER__T_R_A_N_S_P_O_R_T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ANSWER__T_R_A_N_S_P_O_R_T, Answer_TRANSPORTClass))

/* constants */

/* struct DBRequestPingArgs */
struct _DBRequestPingArgs
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _DBRequestPingArgs DBRequestPingArgs;

struct _DBRequestPingArgsClass
{
  ThriftStructClass parent;
};
typedef struct _DBRequestPingArgsClass DBRequestPingArgsClass;

GType d_b_request_ping_args_get_type (void);
#define TYPE_D_B_REQUEST_PING_ARGS (d_b_request_ping_args_get_type())
#define D_B_REQUEST_PING_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_D_B_REQUEST_PING_ARGS, DBRequestPingArgs))
#define D_B_REQUEST_PING_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_D_B_REQUEST_PING_ARGS, DBRequestPingArgsClass))
#define IS_D_B_REQUEST_PING_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_D_B_REQUEST_PING_ARGS))
#define IS_D_B_REQUEST_PING_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_D_B_REQUEST_PING_ARGS))
#define D_B_REQUEST_PING_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_D_B_REQUEST_PING_ARGS, DBRequestPingArgsClass))

/* struct DBRequestPingResult */
struct _DBRequestPingResult
{ 
  ThriftStruct parent; 

  /* public */
};
typedef struct _DBRequestPingResult DBRequestPingResult;

struct _DBRequestPingResultClass
{
  ThriftStructClass parent;
};
typedef struct _DBRequestPingResultClass DBRequestPingResultClass;

GType d_b_request_ping_result_get_type (void);
#define TYPE_D_B_REQUEST_PING_RESULT (d_b_request_ping_result_get_type())
#define D_B_REQUEST_PING_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_D_B_REQUEST_PING_RESULT, DBRequestPingResult))
#define D_B_REQUEST_PING_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_D_B_REQUEST_PING_RESULT, DBRequestPingResultClass))
#define IS_D_B_REQUEST_PING_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_D_B_REQUEST_PING_RESULT))
#define IS_D_B_REQUEST_PING_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_D_B_REQUEST_PING_RESULT))
#define D_B_REQUEST_PING_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_D_B_REQUEST_PING_RESULT, DBRequestPingResultClass))

/* struct DBRequestDoRequestArgs */
struct _DBRequestDoRequestArgs
{ 
  ThriftStruct parent; 

  /* public */
  Request_TRANSPORT * req;
  gboolean __isset_req;
};
typedef struct _DBRequestDoRequestArgs DBRequestDoRequestArgs;

struct _DBRequestDoRequestArgsClass
{
  ThriftStructClass parent;
};
typedef struct _DBRequestDoRequestArgsClass DBRequestDoRequestArgsClass;

GType d_b_request_do_request_args_get_type (void);
#define TYPE_D_B_REQUEST_DO_REQUEST_ARGS (d_b_request_do_request_args_get_type())
#define D_B_REQUEST_DO_REQUEST_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_D_B_REQUEST_DO_REQUEST_ARGS, DBRequestDoRequestArgs))
#define D_B_REQUEST_DO_REQUEST_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_D_B_REQUEST_DO_REQUEST_ARGS, DBRequestDoRequestArgsClass))
#define IS_D_B_REQUEST_DO_REQUEST_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_D_B_REQUEST_DO_REQUEST_ARGS))
#define IS_D_B_REQUEST_DO_REQUEST_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_D_B_REQUEST_DO_REQUEST_ARGS))
#define D_B_REQUEST_DO_REQUEST_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_D_B_REQUEST_DO_REQUEST_ARGS, DBRequestDoRequestArgsClass))

/* struct DBRequestDoRequestResult */
struct _DBRequestDoRequestResult
{ 
  ThriftStruct parent; 

  /* public */
  Answer_TRANSPORT * success;
  gboolean __isset_success;
};
typedef struct _DBRequestDoRequestResult DBRequestDoRequestResult;

struct _DBRequestDoRequestResultClass
{
  ThriftStructClass parent;
};
typedef struct _DBRequestDoRequestResultClass DBRequestDoRequestResultClass;

GType d_b_request_do_request_result_get_type (void);
#define TYPE_D_B_REQUEST_DO_REQUEST_RESULT (d_b_request_do_request_result_get_type())
#define D_B_REQUEST_DO_REQUEST_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_D_B_REQUEST_DO_REQUEST_RESULT, DBRequestDoRequestResult))
#define D_B_REQUEST_DO_REQUEST_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_D_B_REQUEST_DO_REQUEST_RESULT, DBRequestDoRequestResultClass))
#define IS_D_B_REQUEST_DO_REQUEST_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_D_B_REQUEST_DO_REQUEST_RESULT))
#define IS_D_B_REQUEST_DO_REQUEST_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_D_B_REQUEST_DO_REQUEST_RESULT))
#define D_B_REQUEST_DO_REQUEST_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_D_B_REQUEST_DO_REQUEST_RESULT, DBRequestDoRequestResultClass))

#endif /* SCHEMA_TYPES_H */
